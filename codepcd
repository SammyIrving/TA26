import pandas as pd
import numpy as np
from glob import glob

import cv2
import matplotlib.pylab as plt

n = int(input("Masukkan gambar yang ingin diperiksa: ")) 
# Main progam
# reading images
sutures = glob('C:/Users/Samuel Irving P/TA/PCD/*.jpg')
img_mpl = plt.imread(sutures[1])
img_cv2 = cv2.imread(sutures[n-1])
# print(img_mpl.shape)
# print(img_cv2.shape)
# print(img_mpl)
# Display image
# fig, ax = plt.subplots(figsize = (10, 10))
# ax.imshow(img_mpl)
# ax.axis('off') # matiin grid
# plt.show()
# fig, axs = plt.subplots(1, 3, figsize=(15, 5))
# axs[0].imshow(img_mpl[:,:,0], cmap='Reds')
# axs[1].imshow(img_mpl[:,:,1], cmap='Greens')
# axs[2].imshow(img_mpl[:,:,2], cmap='Blues')
# plt.show()
# Resizing
img_gray = cv2.cvtColor(img_cv2, cv2.COLOR_RGB2GRAY)
img_resized = cv2.resize(img_gray, (600, 400))
 # Apply GaussianBlur to reduce noise
blurred = cv2.GaussianBlur(img_resized, (5, 5), 0)

# Use Canny edge detection
edges = cv2.Canny(blurred, 50, 150)
 # Find contours
contours, _ = cv2.findContours(edges.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
if len(contours) < 2:
        print("Could not detect two objects.")
contours = sorted(contours, key=lambda c: cv2.boundingRect(c)[0], reverse=False)

merged_contour = []
current_contour = contours[0]

for i in range(1, len(contours)):

# Get the bounding rectangles for the two objects
    rect1 = cv2.boundingRect(current_contour)
    rect2 = cv2.boundingRect(contours[i])
    center1 = (rect1[0] + rect1[2] // 2, rect1[1] + rect1[3] // 2)
    center2 = (rect2[0] + rect2[2] // 2, rect2[1] + rect2[3] // 2)
    distance1 = np.sqrt((center1[0] - center2[0])**2 + (center1[1] - center2[1])**2)
    
    if distance1 < 7:
        current_contour = np.vstack((current_contour, contours[i]))
    else:
        merged_contour.append(current_contour)
        current_contour = contours[i]
merged_contour.append(current_contour)

for i in range(len(merged_contour) - 1):
    rect1 = cv2.boundingRect(merged_contour[i])
    rect2 = cv2.boundingRect(merged_contour[i + 1])
    
    # Calculate the center points of the two rectangles
    center1 = (rect1[0] + rect1[2] // 2, rect1[1] + rect1[3] // 2)
    center2 = (rect2[0] + rect2[2] // 2, rect2[1] + rect2[3] // 2)

    # Calculate the Euclidean distance
    distance = np.sqrt((center1[0] - center2[0])**2 + (center1[1] - center2[1])**2)
    # Draw contours and center points
    cv2.drawContours(img_resized, [contours[i]], -1, (0, 255, 0), 2)
    cv2.drawContours(img_resized, [contours[i+1]], -1, (0, 0, 255), 2)
    cv2.circle(img_resized, center1, 5, (255, 0, 0), -1)
    cv2.circle(img_resized, center2, 5, (255, 0, 0), -1)
    cv2.line(img_resized, center1, center2, (255, 255, 0), 2)
    distance_in_mm = distance * 0.1/6
    print(f"Distance between objects: {distance} pixels")
    print(f"Distance in mm = {distance_in_mm} mm")
    
# Display the results
cv2.imshow("Image with Distance", img_resized)
cv2.waitKey(0)
cv2.destroyAllWindows()
